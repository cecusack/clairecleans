library(devtools)
library(roxygen2)
library(devtools)
library(roxygen2)
proj_sitrep()
proj_get()
proj_sitrep()
load_all()
load_all()
use_gpl3_license()
`use_gpl3_license`()
use_gpl3_license()
devtools::document()
Sys.time()
getwd()
dir.create("data")
dir.create("data-raw")
use_data_raw()
devtools::load_all()
devtools::document()
devtools::document()
?describe
?psych::describe
devtools::document()
devtools::load_all()
?fixheight
?fixheight
usethis::use_vignette("my-vignette")
load(dat)
data(dat)
rm(dat)
#> to load datasets from this package, uncomment lines below
#> data(dat)
#> data(fake_data)
#> quick view data
head(dat)
head(fake_data)
devtools::load_all()
?fixheight
?missing
?check_measure
check_measure=function(x, min, max){
# input check
if(missing(x)) stop("Specify the variable(s) you want to check (e.g., dat$var).")
if(missing(min)) stop("Specify the minimum possible value for this variable.")
if(missing(max)) stop("Specify the maximum possible value for this variable.")
{ valid <- function(x) {  sum(!is.na(x))}
if(is.vector(x)){
stats = data.frame(matrix(rep(NA,5),ncol=5) )   #create a temporary arraystats[1, 1] <-  mean(x, na.rm=na.rm )
stats[1,1]=x
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("var", "mean", "sd", "min", "max")
#round(stats)
} else {
statnames=names(x)
len = dim(x)[2]     #do it for matrices or data.frames
stats = data.frame(matrix(ncol=5,nrow=as.numeric(len)))
names(stats)=c("var", "mean", "sd", "min", "max")
for (i in 1:len) {
stats[i, 2] <-  round(mean(x[,i], na.rm=TRUE),2)
stats[i, 3] <- round(sd(x[,i], na.rm=TRUE),2)
stats[i, 4] <-  min(x[,i], na.rm=TRUE)
stats[i, 5] <-  max(x[,i], na.rm=TRUE)
stats[i, 1] = statnames[i]
}
}}
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
}
load(dat)
devtools::load_all()
load(dat)
data(dat)
View(dat)
?check_measures
devtools::load_all()
?check_measures
?checkmeasure
library(clairecleans)
?check_measure
devtools::document()
?check_measure
View(fake_data)
devtools::document()
rm(list=c("check_measure"))
devtools::load_all()
devtools::document()
library(roxygen2)
devtools::document()
devtools::document()
?
?check_measure
?fixweight
devtools::document()
?fixweight
devtools::document()
?fixheight
?fixweight
?check_measure
devtools::document()
?check_measure
file.exists("~/.ssh/id_rsa.pub")
ls
getwd()
getwd()
getwd()
.rs.restartR()
