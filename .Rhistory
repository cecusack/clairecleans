library(devtools)
library(roxygen2)
library(devtools)
library(roxygen2)
proj_sitrep()
proj_get()
proj_sitrep()
load_all()
load_all()
use_gpl3_license()
`use_gpl3_license`()
use_gpl3_license()
devtools::document()
Sys.time()
getwd()
dir.create("data")
dir.create("data-raw")
use_data_raw()
devtools::load_all()
devtools::document()
devtools::document()
?describe
?psych::describe
devtools::document()
devtools::load_all()
?fixheight
?fixheight
usethis::use_vignette("my-vignette")
load(dat)
data(dat)
rm(dat)
#> to load datasets from this package, uncomment lines below
#> data(dat)
#> data(fake_data)
#> quick view data
head(dat)
head(fake_data)
devtools::load_all()
?fixheight
?missing
?check_measure
check_measure=function(x, min, max){
# input check
if(missing(x)) stop("Specify the variable(s) you want to check (e.g., dat$var).")
if(missing(min)) stop("Specify the minimum possible value for this variable.")
if(missing(max)) stop("Specify the maximum possible value for this variable.")
{ valid <- function(x) {  sum(!is.na(x))}
if(is.vector(x)){
stats = data.frame(matrix(rep(NA,5),ncol=5) )   #create a temporary arraystats[1, 1] <-  mean(x, na.rm=na.rm )
stats[1,1]=x
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("var", "mean", "sd", "min", "max")
#round(stats)
} else {
statnames=names(x)
len = dim(x)[2]     #do it for matrices or data.frames
stats = data.frame(matrix(ncol=5,nrow=as.numeric(len)))
names(stats)=c("var", "mean", "sd", "min", "max")
for (i in 1:len) {
stats[i, 2] <-  round(mean(x[,i], na.rm=TRUE),2)
stats[i, 3] <- round(sd(x[,i], na.rm=TRUE),2)
stats[i, 4] <-  min(x[,i], na.rm=TRUE)
stats[i, 5] <-  max(x[,i], na.rm=TRUE)
stats[i, 1] = statnames[i]
}
}}
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
}
load(dat)
devtools::load_all()
load(dat)
data(dat)
View(dat)
?check_measures
devtools::load_all()
?check_measures
?checkmeasure
library(clairecleans)
?check_measure
devtools::document()
?check_measure
View(fake_data)
devtools::document()
rm(list=c("check_measure"))
devtools::load_all()
devtools::document()
library(roxygen2)
devtools::document()
devtools::document()
?
?check_measure
?fixweight
devtools::document()
?fixweight
devtools::document()
?fixheight
?fixweight
?check_measure
devtools::document()
?check_measure
file.exists("~/.ssh/id_rsa.pub")
ls
getwd()
getwd()
getwd()
.rs.restartR()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_github()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
add remote
git init
?fixheight
devtools::load_all()
?check_measure?
?check_measure
library(roxygen2)
library(devtools)
devtools::load_all()
devtools::document()
use_gpl_license(version = 3, include_future = TRUE)
#> to load datasets in this package
data(dat, package="clairecleans")
data(fake_data, package="clairecleans")
#> quick view data
head(dat)
head(fake_data)
#> Get a sense of what height looks like
table(dat$height, useNA = "ifany")
fixheight(dat, "height")
??use_vignette
usethis::use_vignette()
devtools::load_all()
library(roxygen2)
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
rm(list = c("check_measure"))
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(tidyverse)
library(mgsub)
library(measurements)
data(fake_data)
check_measure(fake_data$edeq6_1, 0,6)
x="fake_data$edeq6_1"
#' @param min Minimum value for the item/s
#' @param max Minimum value for the item/s
#' @return The mean, standard deviation, minimum, and maximum value for items. A message indicating which items have observations outside of the possible range of values for that item. "Pass" in columns titled min_check and max_check indicate all values are at or above the minumum value and at or below the maximum value. "CHECK" indicates that values fall outside of the possible range.
#' @examples
#' check_measure(fake_data$edeq6_1, 0, 6)
#' check_measure(fake_data[,grep('bdi_[0-9]{1,2}_clinical', colnames(fake_data))],0,6)
#' check_measure(fake_data[,c(41,48)], 0,3)
#' check_measure(fake_data[,c(which(colnames(fake_data)=="edeq6_1"), which(colnames(fake_data)=="ede6_6"))], 0,6)
#' @export
#'
check_measure=function(x, min, max){
# input check
if(missing(x)) stop("Specify the variable(s) you want to check (e.g., dat$var).")
if(missing(min)) stop("Specify the minimum possible value for this variable.")
if(missing(max)) stop("Specify the maximum possible value for this variable.")
{ valid <- function(x) {  sum(!is.na(x))}
if(is.vector(x)){
stats = data.frame(matrix(rep(NA,5),ncol=5))
stats[1,1]=""
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("", "mean", "sd", "min", "max")
#round(stats)
} else {
statnames=names(x)
len = dim(x)[2]     #do it for matrices or data.frames
stats = data.frame(matrix(ncol=5,nrow=as.numeric(len)))
names(stats)=c("var", "mean", "sd", "min", "max")
for (i in 1:len) {
stats[i, 2] <-  round(mean(x[,i], na.rm=TRUE),2)
stats[i, 3] <- round(sd(x[,i], na.rm=TRUE),2)
stats[i, 4] <-  min(x[,i], na.rm=TRUE)
stats[i, 5] <-  max(x[,i], na.rm=TRUE)
stats[i, 1] = statnames[i]
}
}}
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
}
stats = data.frame(matrix(rep(NA,5),ncol=5))
stats[1,1]=""
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("", "mean", "sd", "min", "max")
View(stats)
x=fake_data$edeq6_1
stats = data.frame(matrix(rep(NA,5),ncol=5))
stats[1,1]=""
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("", "mean", "sd", "min", "max")
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
min=0
max=6
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
check_measure(fake_data$edeq6_1)
check_measure(fake_data$edeq6_1,0,6)
devtools::load_all()
rm(list = c("check_measure"))
library(clairecleans)
library(tidyverse)
library(measurements)
#> to load datasets in this package
data(dat, package="clairecleans")
data(fake_data, package="clairecleans")
#> quick view data
head(dat)
head(fake_data)
check_measure
#> example of checking one item
check_measure(fake_data$edeq6_1, 0, 6)
library(clairecleans)
?devtools::build_vignettes
#> example checking multiple items using grep()
check_measure(fake_data[,grep('bdi_[0-9]{1,2}_clinical', colnames(fake_data))],0,6)
#> example of checking one item
check_measure(fake_data$edeq6_1, 0, 6)
#> example checking multiple items using grep()
check_measure(fake_data[,grep('bdi_[0-9]{1,2}_clinical', colnames(fake_data))],0,6)
#> example checking multiple items using column numbers
check_measure(fake_data[,c(41,48)], 0,3)
#> example checking multiple items using c(which(colnames(dat)=="var"), which(colnames(dat)=="var2"))
check_measure(fake_data[,c(which(colnames(fake_data)=="edeq6_1"), which(colnames(fake_data)=="ede6_6"))], 0,6)
#> example checking multiple items using c(which(colnames(dat)=="var"), which(colnames(dat)=="var2"))
check_measure(fake_data[,c(which(colnames(fake_data)=="edeq6_1"), which(colnames(fake_data)=="ede6_6"))], 0,6)
#> example checking multiple items using c(which(colnames(dat)=="var"), which(colnames(dat)=="var2"))
check_measure(fake_data[,c(which(colnames(fake_data)=="edeq6_1"): which(colnames(fake_data)=="ede6_6"))], 0,6)
library(clairecleans)
library(tidyverse)
library(measurements)
#> to load datasets in this package
data(dat, package="clairecleans")
data(fake_data, package="clairecleans")
#> quick view data
head(dat)
head(fake_data)
#> example of checking one item
check_measure(fake_data$edeq6_1, 0, 6)
#> example of checking one item
check_measure(fake_data$edeq6_1, 0, 6)
#> example of checking one item
clairecleans::check_measure(fake_data$edeq6_1, 0, 6)
check_measure=function(x, min, max){
# input check
if(missing(x)) stop("Specify the variable(s) you want to check (e.g., dat$var).")
if(missing(min)) stop("Specify the minimum possible value for this variable.")
if(missing(max)) stop("Specify the maximum possible value for this variable.")
{ valid <- function(x) {  sum(!is.na(x))}
if(is.vector(x)){
stats = data.frame(matrix(rep(NA,5),ncol=5))
stats[1,1]=""
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("", "mean", "sd", "min", "max")
#round(stats)
} else {
statnames=names(x)
len = dim(x)[2]     #do it for matrices or data.frames
stats = data.frame(matrix(ncol=5,nrow=as.numeric(len)))
names(stats)=c("var", "mean", "sd", "min", "max")
for (i in 1:len) {
stats[i, 2] <-  round(mean(x[,i], na.rm=TRUE),2)
stats[i, 3] <- round(sd(x[,i], na.rm=TRUE),2)
stats[i, 4] <-  min(x[,i], na.rm=TRUE)
stats[i, 5] <-  max(x[,i], na.rm=TRUE)
stats[i, 1] = statnames[i]
}
}}
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
}
#> example of checking one item
check_measure(fake_data$edeq6_1, 0, 6)
load_all
devtools::load_all()
rm(list=c("check_measure"))
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
check_measure=function(x, min, max){
# input check
if(missing(x)) stop("Specify the variable(s) you want to check (e.g., dat$var).")
if(missing(min)) stop("Specify the minimum possible value for this variable.")
if(missing(max)) stop("Specify the maximum possible value for this variable.")
{ valid <- function(x) {  sum(!is.na(x))}
if(is.vector(x)){
stats = data.frame(matrix(rep(NA,5),ncol=5))
stats[1,1]=""
stats[1, 2]=round(mean(x,na.rm=TRUE),2)
stats[1, 3]=round(sd(x,na.rm=TRUE),2)
stats[1, 4]=min(x,na.rm=TRUE)
stats[1, 5]=max(x,na.rm=TRUE)
names(stats)=c("", "mean", "sd", "min", "max")
#round(stats)
} else {
statnames=names(x)
len = dim(x)[2]     #do it for matrices or data.frames
stats = data.frame(matrix(ncol=5,nrow=as.numeric(len)))
names(stats)=c("var", "mean", "sd", "min", "max")
for (i in 1:len) {
stats[i, 2] <-  round(mean(x[,i], na.rm=TRUE),2)
stats[i, 3] <- round(sd(x[,i], na.rm=TRUE),2)
stats[i, 4] <-  min(x[,i], na.rm=TRUE)
stats[i, 5] <-  max(x[,i], na.rm=TRUE)
stats[i, 1] = statnames[i]
}
}}
stats$min_check=ifelse(stats$min<min, "CHECK", "Pass")
stats$max_check=ifelse(stats$max>max, "CHECK", "Pass")
descript=stats
results=list()
results$descriptives=descript
results$conditionalmessage=ifelse(any(descript$min<min|descript$max>max),
paste0("these are the variables to check: ", paste0(unlist(stats[which(stats$max_check=="CHECK")|which(stats$max_check=="CHECK"),1]), collapse = ", ")),
"All observations are within the possible range for this variable.")
return(results)
}
data("fake_data")
check_measure(fake_data$edeq6_1,0,6)
rm(check_measure())
rm(check_measure)
clairecleans::check_measure(fake_data$edeq6_1)
library(devtools)
install_github("cecusack/clairecleans")
load_all()
clairecleans::check_measure(fake_data$edeq6_1)
check_measure(fake_data$edeq6_1)
check_measure(fake_data$edeq6_1,0,6)
clairecleans::check_measure(fake_data$edeq6_1,0,6)
load("~/Dropbox/eat lab git/clairecleans/data/fake_data.RData")
View(fake_data)
View(fake_data)
library(devtools)
library(roxygen2)
devtools::load_all()
devtools::document()
